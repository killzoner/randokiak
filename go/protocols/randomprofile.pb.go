// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: randomprofile.proto

package protocols

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ID struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ID) Reset()      { *m = ID{} }
func (*ID) ProtoMessage() {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_20def8b61de02026, []int{0}
}
func (m *ID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return m.Size()
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Location struct {
	Street   string `protobuf:"bytes,1,opt,name=street,proto3" json:"street,omitempty"`
	City     string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	State    string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Postcode int64  `protobuf:"varint,4,opt,name=postcode,proto3" json:"postcode,omitempty"`
}

func (m *Location) Reset()      { *m = Location{} }
func (*Location) ProtoMessage() {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_20def8b61de02026, []int{1}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *Location) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Location) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Location) GetPostcode() int64 {
	if m != nil {
		return m.Postcode
	}
	return 0
}

type Login struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Salt     string `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	Md5      string `protobuf:"bytes,4,opt,name=md5,proto3" json:"md5,omitempty"`
	Sha1     string `protobuf:"bytes,5,opt,name=sha1,proto3" json:"sha1,omitempty"`
	Sha256   string `protobuf:"bytes,6,opt,name=sha256,proto3" json:"sha256,omitempty"`
}

func (m *Login) Reset()      { *m = Login{} }
func (*Login) ProtoMessage() {}
func (*Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_20def8b61de02026, []int{2}
}
func (m *Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Login.Merge(m, src)
}
func (m *Login) XXX_Size() int {
	return m.Size()
}
func (m *Login) XXX_DiscardUnknown() {
	xxx_messageInfo_Login.DiscardUnknown(m)
}

var xxx_messageInfo_Login proto.InternalMessageInfo

func (m *Login) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Login) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Login) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *Login) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *Login) GetSha1() string {
	if m != nil {
		return m.Sha1
	}
	return ""
}

func (m *Login) GetSha256() string {
	if m != nil {
		return m.Sha256
	}
	return ""
}

type Name struct {
	First string `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Last  string `protobuf:"bytes,2,opt,name=last,proto3" json:"last,omitempty"`
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *Name) Reset()      { *m = Name{} }
func (*Name) ProtoMessage() {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_20def8b61de02026, []int{3}
}
func (m *Name) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Name.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return m.Size()
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *Name) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

func (m *Name) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Picture struct {
	Large     string `protobuf:"bytes,1,opt,name=large,proto3" json:"large,omitempty"`
	Medium    string `protobuf:"bytes,2,opt,name=medium,proto3" json:"medium,omitempty"`
	Thumbnail string `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (m *Picture) Reset()      { *m = Picture{} }
func (*Picture) ProtoMessage() {}
func (*Picture) Descriptor() ([]byte, []int) {
	return fileDescriptor_20def8b61de02026, []int{4}
}
func (m *Picture) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Picture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Picture.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Picture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Picture.Merge(m, src)
}
func (m *Picture) XXX_Size() int {
	return m.Size()
}
func (m *Picture) XXX_DiscardUnknown() {
	xxx_messageInfo_Picture.DiscardUnknown(m)
}

var xxx_messageInfo_Picture proto.InternalMessageInfo

func (m *Picture) GetLarge() string {
	if m != nil {
		return m.Large
	}
	return ""
}

func (m *Picture) GetMedium() string {
	if m != nil {
		return m.Medium
	}
	return ""
}

func (m *Picture) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

type Profile struct {
	Gender     string           `protobuf:"bytes,1,opt,name=gender,proto3" json:"gender,omitempty"`
	Name       *ProfileName     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Location   *ProfileLocation `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Email      string           `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Login      *ProfileLogin    `protobuf:"bytes,5,opt,name=login,proto3" json:"login,omitempty"`
	Dob        string           `protobuf:"bytes,6,opt,name=dob,proto3" json:"dob,omitempty"`
	Registered string           `protobuf:"bytes,7,opt,name=registered,proto3" json:"registered,omitempty"`
	Phone      string           `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
	Cell       string           `protobuf:"bytes,9,opt,name=cell,proto3" json:"cell,omitempty"`
	Id         *ProfileId       `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Picture    *ProfilePicture  `protobuf:"bytes,11,opt,name=picture,proto3" json:"picture,omitempty"`
	Nat        string           `protobuf:"bytes,12,opt,name=nat,proto3" json:"nat,omitempty"`
}

func (m *Profile) Reset()      { *m = Profile{} }
func (*Profile) ProtoMessage() {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_20def8b61de02026, []int{5}
}
func (m *Profile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return m.Size()
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Profile) GetName() *ProfileName {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Profile) GetLocation() *ProfileLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Profile) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Profile) GetLogin() *ProfileLogin {
	if m != nil {
		return m.Login
	}
	return nil
}

func (m *Profile) GetDob() string {
	if m != nil {
		return m.Dob
	}
	return ""
}

func (m *Profile) GetRegistered() string {
	if m != nil {
		return m.Registered
	}
	return ""
}

func (m *Profile) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Profile) GetCell() string {
	if m != nil {
		return m.Cell
	}
	return ""
}

func (m *Profile) GetId() *ProfileId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Profile) GetPicture() *ProfilePicture {
	if m != nil {
		return m.Picture
	}
	return nil
}

func (m *Profile) GetNat() string {
	if m != nil {
		return m.Nat
	}
	return ""
}

type ProfileId struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ProfileId) Reset()      { *m = ProfileId{} }
func (*ProfileId) ProtoMessage() {}
func (*ProfileId) Descriptor() ([]byte, []int) {
	return fileDescriptor_20def8b61de02026, []int{6}
}
func (m *ProfileId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileId.Merge(m, src)
}
func (m *ProfileId) XXX_Size() int {
	return m.Size()
}
func (m *ProfileId) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileId.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileId proto.InternalMessageInfo

func (m *ProfileId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProfileLocation struct {
	Street   string `protobuf:"bytes,1,opt,name=street,proto3" json:"street,omitempty"`
	City     string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	State    string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Postcode int64  `protobuf:"varint,4,opt,name=postcode,proto3" json:"postcode,omitempty"`
}

func (m *ProfileLocation) Reset()      { *m = ProfileLocation{} }
func (*ProfileLocation) ProtoMessage() {}
func (*ProfileLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_20def8b61de02026, []int{7}
}
func (m *ProfileLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileLocation.Merge(m, src)
}
func (m *ProfileLocation) XXX_Size() int {
	return m.Size()
}
func (m *ProfileLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileLocation.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileLocation proto.InternalMessageInfo

func (m *ProfileLocation) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *ProfileLocation) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *ProfileLocation) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ProfileLocation) GetPostcode() int64 {
	if m != nil {
		return m.Postcode
	}
	return 0
}

type ProfileLogin struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Salt     string `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	Md5      string `protobuf:"bytes,4,opt,name=md5,proto3" json:"md5,omitempty"`
	Sha1     string `protobuf:"bytes,5,opt,name=sha1,proto3" json:"sha1,omitempty"`
	Sha256   string `protobuf:"bytes,6,opt,name=sha256,proto3" json:"sha256,omitempty"`
}

func (m *ProfileLogin) Reset()      { *m = ProfileLogin{} }
func (*ProfileLogin) ProtoMessage() {}
func (*ProfileLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_20def8b61de02026, []int{8}
}
func (m *ProfileLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileLogin.Merge(m, src)
}
func (m *ProfileLogin) XXX_Size() int {
	return m.Size()
}
func (m *ProfileLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileLogin.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileLogin proto.InternalMessageInfo

func (m *ProfileLogin) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ProfileLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ProfileLogin) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *ProfileLogin) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *ProfileLogin) GetSha1() string {
	if m != nil {
		return m.Sha1
	}
	return ""
}

func (m *ProfileLogin) GetSha256() string {
	if m != nil {
		return m.Sha256
	}
	return ""
}

type ProfileName struct {
	First string `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Last  string `protobuf:"bytes,2,opt,name=last,proto3" json:"last,omitempty"`
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *ProfileName) Reset()      { *m = ProfileName{} }
func (*ProfileName) ProtoMessage() {}
func (*ProfileName) Descriptor() ([]byte, []int) {
	return fileDescriptor_20def8b61de02026, []int{9}
}
func (m *ProfileName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileName.Merge(m, src)
}
func (m *ProfileName) XXX_Size() int {
	return m.Size()
}
func (m *ProfileName) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileName.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileName proto.InternalMessageInfo

func (m *ProfileName) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *ProfileName) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

func (m *ProfileName) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type ProfilePicture struct {
	Large     string `protobuf:"bytes,1,opt,name=large,proto3" json:"large,omitempty"`
	Medium    string `protobuf:"bytes,2,opt,name=medium,proto3" json:"medium,omitempty"`
	Thumbnail string `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (m *ProfilePicture) Reset()      { *m = ProfilePicture{} }
func (*ProfilePicture) ProtoMessage() {}
func (*ProfilePicture) Descriptor() ([]byte, []int) {
	return fileDescriptor_20def8b61de02026, []int{10}
}
func (m *ProfilePicture) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfilePicture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfilePicture.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfilePicture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfilePicture.Merge(m, src)
}
func (m *ProfilePicture) XXX_Size() int {
	return m.Size()
}
func (m *ProfilePicture) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfilePicture.DiscardUnknown(m)
}

var xxx_messageInfo_ProfilePicture proto.InternalMessageInfo

func (m *ProfilePicture) GetLarge() string {
	if m != nil {
		return m.Large
	}
	return ""
}

func (m *ProfilePicture) GetMedium() string {
	if m != nil {
		return m.Medium
	}
	return ""
}

func (m *ProfilePicture) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func init() {
	proto.RegisterType((*ID)(nil), "randomprofile.ID")
	proto.RegisterType((*Location)(nil), "randomprofile.Location")
	proto.RegisterType((*Login)(nil), "randomprofile.Login")
	proto.RegisterType((*Name)(nil), "randomprofile.Name")
	proto.RegisterType((*Picture)(nil), "randomprofile.Picture")
	proto.RegisterType((*Profile)(nil), "randomprofile.Profile")
	proto.RegisterType((*ProfileId)(nil), "randomprofile.ProfileId")
	proto.RegisterType((*ProfileLocation)(nil), "randomprofile.ProfileLocation")
	proto.RegisterType((*ProfileLogin)(nil), "randomprofile.ProfileLogin")
	proto.RegisterType((*ProfileName)(nil), "randomprofile.ProfileName")
	proto.RegisterType((*ProfilePicture)(nil), "randomprofile.ProfilePicture")
}

func init() { proto.RegisterFile("randomprofile.proto", fileDescriptor_20def8b61de02026) }

var fileDescriptor_20def8b61de02026 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcf, 0x6e, 0x13, 0x3f,
	0x10, 0x5e, 0x27, 0x4d, 0x93, 0x4c, 0xfa, 0xfb, 0x81, 0xdc, 0x0a, 0x59, 0x05, 0x4c, 0xb5, 0xa7,
	0x9e, 0x2a, 0x35, 0xa8, 0x20, 0xc1, 0x0d, 0x21, 0xa4, 0x48, 0x05, 0x55, 0x2b, 0x71, 0x41, 0x5c,
	0x9c, 0xac, 0x9b, 0xb5, 0xe4, 0x5d, 0x47, 0x5e, 0x47, 0x88, 0x1b, 0x8f, 0x00, 0x37, 0xde, 0x00,
	0x1e, 0x85, 0x63, 0x8e, 0x3d, 0x92, 0xcd, 0x85, 0x63, 0x1f, 0x01, 0xf9, 0xcf, 0x2e, 0x09, 0x0a,
	0x27, 0x40, 0xe2, 0x36, 0x9f, 0xf7, 0xf3, 0x37, 0x33, 0xfe, 0x66, 0x16, 0xf6, 0x35, 0x2b, 0x52,
	0x95, 0xcf, 0xb4, 0xba, 0x14, 0x92, 0x9f, 0xcc, 0xb4, 0x32, 0x0a, 0xff, 0xb7, 0x71, 0x18, 0x13,
	0x68, 0x8d, 0x9e, 0x62, 0x0c, 0x3b, 0x05, 0xcb, 0x39, 0x41, 0x47, 0xe8, 0xb8, 0x9f, 0xb8, 0x38,
	0xce, 0xa0, 0x77, 0xae, 0x26, 0xcc, 0x08, 0x55, 0xe0, 0x5b, 0xb0, 0x5b, 0x1a, 0xcd, 0xb9, 0x09,
	0x8c, 0x80, 0xec, 0xbd, 0x89, 0x30, 0x6f, 0x49, 0xcb, 0xdf, 0xb3, 0x31, 0x3e, 0x80, 0x4e, 0x69,
	0x98, 0xe1, 0xa4, 0xed, 0x0e, 0x3d, 0xc0, 0x87, 0xd0, 0x9b, 0xa9, 0xd2, 0x4c, 0x54, 0xca, 0xc9,
	0xce, 0x11, 0x3a, 0x6e, 0x27, 0x0d, 0x8e, 0x3f, 0x20, 0xe8, 0x9c, 0xab, 0xa9, 0x28, 0x2c, 0x6b,
	0x5e, 0x72, 0xbd, 0x56, 0x4b, 0x83, 0x9d, 0x02, 0x2b, 0xcb, 0x37, 0x4a, 0xa7, 0x21, 0x5f, 0x83,
	0x6d, 0x1d, 0x25, 0x93, 0x26, 0xa4, 0x74, 0x31, 0xbe, 0x09, 0xed, 0x3c, 0x3d, 0x73, 0xc9, 0xfa,
	0x89, 0x0d, 0x1d, 0x2b, 0x63, 0xa7, 0xa4, 0x13, 0x58, 0x19, 0x3b, 0x75, 0x9d, 0x65, 0x6c, 0x78,
	0xf6, 0x80, 0xec, 0x86, 0xce, 0x1c, 0x8a, 0x9f, 0xc1, 0xce, 0x0b, 0x9b, 0xf5, 0x00, 0x3a, 0x97,
	0x42, 0x97, 0x75, 0xe3, 0x1e, 0x58, 0x25, 0xc9, 0x4a, 0x53, 0xf7, 0x6d, 0x63, 0xcb, 0x34, 0xc2,
	0xc8, 0xa6, 0x6f, 0x07, 0xe2, 0x97, 0xd0, 0xbd, 0x10, 0x13, 0x33, 0xd7, 0x4e, 0x4a, 0x32, 0x3d,
	0xad, 0x3b, 0xf3, 0xc0, 0x16, 0x90, 0xf3, 0x54, 0xcc, 0xf3, 0x20, 0x16, 0x10, 0xbe, 0x03, 0x7d,
	0x93, 0xcd, 0xf3, 0x71, 0xc1, 0x84, 0x0c, 0x92, 0x3f, 0x0e, 0xe2, 0x4f, 0x6d, 0xe8, 0x5e, 0x78,
	0x0b, 0xad, 0xc2, 0x94, 0x17, 0x29, 0xd7, 0xb5, 0x39, 0x1e, 0xe1, 0x93, 0x60, 0xaa, 0xd5, 0x1d,
	0x0c, 0x0f, 0x4f, 0x36, 0xa7, 0x21, 0xdc, 0xb6, 0x4d, 0x7a, 0xc3, 0xf1, 0x23, 0xe8, 0xc9, 0x60,
	0xb8, 0x4b, 0x38, 0x18, 0xd2, 0xed, 0x77, 0xea, 0xb1, 0x48, 0x1a, 0xbe, 0xed, 0x8d, 0xe7, 0xb6,
	0x52, 0xff, 0xdc, 0x1e, 0xe0, 0x53, 0xe8, 0x48, 0xeb, 0xab, 0x7b, 0xf1, 0xc1, 0xf0, 0xf6, 0xaf,
	0xe4, 0xa6, 0xa2, 0x48, 0x3c, 0xd3, 0xba, 0x96, 0xaa, 0x71, 0x30, 0xc3, 0x86, 0x98, 0x02, 0x68,
	0x3e, 0x15, 0xa5, 0xe1, 0x9a, 0xa7, 0xa4, 0xeb, 0x3e, 0xac, 0x9d, 0xd8, 0xd4, 0xb3, 0x4c, 0x15,
	0x9c, 0xf4, 0x7c, 0x6a, 0x07, 0xdc, 0x64, 0x72, 0x29, 0x49, 0x3f, 0x4c, 0x26, 0x97, 0x12, 0x1f,
	0x43, 0x4b, 0xa4, 0x04, 0x5c, 0x2d, 0x64, 0x7b, 0x2d, 0xa3, 0x34, 0x69, 0x89, 0x14, 0x3f, 0x84,
	0xee, 0xcc, 0xbb, 0x46, 0x06, 0x8e, 0x7e, 0x77, 0x3b, 0x3d, 0x58, 0x9b, 0xd4, 0x6c, 0x5b, 0x7e,
	0xc1, 0x0c, 0xd9, 0xf3, 0xe5, 0x17, 0xcc, 0xc4, 0xf7, 0xa0, 0xdf, 0x68, 0x6f, 0xdd, 0x33, 0x05,
	0x37, 0x7e, 0x7a, 0xd7, 0xbf, 0xbc, 0x6e, 0x1f, 0x11, 0xec, 0xad, 0x3f, 0xfd, 0x3f, 0xb4, 0x75,
	0xcf, 0x61, 0xb0, 0x36, 0x97, 0xbf, 0xbd, 0x7c, 0xaf, 0xe1, 0xff, 0x4d, 0xa3, 0xfe, 0xe4, 0x0e,
	0x3e, 0x19, 0x2d, 0x96, 0x34, 0xba, 0x5a, 0xd2, 0xe8, 0x7a, 0x49, 0xd1, 0xbb, 0x8a, 0xa2, 0xcf,
	0x15, 0x45, 0x5f, 0x2a, 0x8a, 0x16, 0x15, 0x45, 0x5f, 0x2b, 0x8a, 0xbe, 0x55, 0x34, 0xba, 0xae,
	0x28, 0x7a, 0xbf, 0xa2, 0xd1, 0x62, 0x45, 0xa3, 0xab, 0x15, 0x8d, 0x5e, 0xed, 0xbb, 0xdf, 0xf0,
	0x44, 0xc9, 0xf2, 0x71, 0x13, 0x8d, 0x77, 0x5d, 0x78, 0xff, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x19, 0x77, 0xc9, 0xe1, 0xb2, 0x05, 0x00, 0x00,
}

func (this *ID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ID)
	if !ok {
		that2, ok := that.(ID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Location) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Location)
	if !ok {
		that2, ok := that.(Location)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Street != that1.Street {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Postcode != that1.Postcode {
		return false
	}
	return true
}
func (this *Login) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Login)
	if !ok {
		that2, ok := that.(Login)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Salt != that1.Salt {
		return false
	}
	if this.Md5 != that1.Md5 {
		return false
	}
	if this.Sha1 != that1.Sha1 {
		return false
	}
	if this.Sha256 != that1.Sha256 {
		return false
	}
	return true
}
func (this *Name) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Name)
	if !ok {
		that2, ok := that.(Name)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.First != that1.First {
		return false
	}
	if this.Last != that1.Last {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *Picture) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Picture)
	if !ok {
		that2, ok := that.(Picture)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Large != that1.Large {
		return false
	}
	if this.Medium != that1.Medium {
		return false
	}
	if this.Thumbnail != that1.Thumbnail {
		return false
	}
	return true
}
func (this *Profile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Profile)
	if !ok {
		that2, ok := that.(Profile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if !this.Login.Equal(that1.Login) {
		return false
	}
	if this.Dob != that1.Dob {
		return false
	}
	if this.Registered != that1.Registered {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Cell != that1.Cell {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.Picture.Equal(that1.Picture) {
		return false
	}
	if this.Nat != that1.Nat {
		return false
	}
	return true
}
func (this *ProfileId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileId)
	if !ok {
		that2, ok := that.(ProfileId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ProfileLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileLocation)
	if !ok {
		that2, ok := that.(ProfileLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Street != that1.Street {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Postcode != that1.Postcode {
		return false
	}
	return true
}
func (this *ProfileLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileLogin)
	if !ok {
		that2, ok := that.(ProfileLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Salt != that1.Salt {
		return false
	}
	if this.Md5 != that1.Md5 {
		return false
	}
	if this.Sha1 != that1.Sha1 {
		return false
	}
	if this.Sha256 != that1.Sha256 {
		return false
	}
	return true
}
func (this *ProfileName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileName)
	if !ok {
		that2, ok := that.(ProfileName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.First != that1.First {
		return false
	}
	if this.Last != that1.Last {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *ProfilePicture) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfilePicture)
	if !ok {
		that2, ok := that.(ProfilePicture)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Large != that1.Large {
		return false
	}
	if this.Medium != that1.Medium {
		return false
	}
	if this.Thumbnail != that1.Thumbnail {
		return false
	}
	return true
}
func (this *ID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protocols.ID{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Location) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&protocols.Location{")
	s = append(s, "Street: "+fmt.Sprintf("%#v", this.Street)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Postcode: "+fmt.Sprintf("%#v", this.Postcode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Login) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&protocols.Login{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Salt: "+fmt.Sprintf("%#v", this.Salt)+",\n")
	s = append(s, "Md5: "+fmt.Sprintf("%#v", this.Md5)+",\n")
	s = append(s, "Sha1: "+fmt.Sprintf("%#v", this.Sha1)+",\n")
	s = append(s, "Sha256: "+fmt.Sprintf("%#v", this.Sha256)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Name) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protocols.Name{")
	s = append(s, "First: "+fmt.Sprintf("%#v", this.First)+",\n")
	s = append(s, "Last: "+fmt.Sprintf("%#v", this.Last)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Picture) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protocols.Picture{")
	s = append(s, "Large: "+fmt.Sprintf("%#v", this.Large)+",\n")
	s = append(s, "Medium: "+fmt.Sprintf("%#v", this.Medium)+",\n")
	s = append(s, "Thumbnail: "+fmt.Sprintf("%#v", this.Thumbnail)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Profile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&protocols.Profile{")
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	if this.Name != nil {
		s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	}
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	if this.Login != nil {
		s = append(s, "Login: "+fmt.Sprintf("%#v", this.Login)+",\n")
	}
	s = append(s, "Dob: "+fmt.Sprintf("%#v", this.Dob)+",\n")
	s = append(s, "Registered: "+fmt.Sprintf("%#v", this.Registered)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Cell: "+fmt.Sprintf("%#v", this.Cell)+",\n")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Picture != nil {
		s = append(s, "Picture: "+fmt.Sprintf("%#v", this.Picture)+",\n")
	}
	s = append(s, "Nat: "+fmt.Sprintf("%#v", this.Nat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProfileId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protocols.ProfileId{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProfileLocation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&protocols.ProfileLocation{")
	s = append(s, "Street: "+fmt.Sprintf("%#v", this.Street)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Postcode: "+fmt.Sprintf("%#v", this.Postcode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProfileLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&protocols.ProfileLogin{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Salt: "+fmt.Sprintf("%#v", this.Salt)+",\n")
	s = append(s, "Md5: "+fmt.Sprintf("%#v", this.Md5)+",\n")
	s = append(s, "Sha1: "+fmt.Sprintf("%#v", this.Sha1)+",\n")
	s = append(s, "Sha256: "+fmt.Sprintf("%#v", this.Sha256)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProfileName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protocols.ProfileName{")
	s = append(s, "First: "+fmt.Sprintf("%#v", this.First)+",\n")
	s = append(s, "Last: "+fmt.Sprintf("%#v", this.Last)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProfilePicture) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protocols.ProfilePicture{")
	s = append(s, "Large: "+fmt.Sprintf("%#v", this.Large)+",\n")
	s = append(s, "Medium: "+fmt.Sprintf("%#v", this.Medium)+",\n")
	s = append(s, "Thumbnail: "+fmt.Sprintf("%#v", this.Thumbnail)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRandomprofile(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Postcode != 0 {
		i = encodeVarintRandomprofile(dAtA, i, uint64(m.Postcode))
		i--
		dAtA[i] = 0x20
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Street) > 0 {
		i -= len(m.Street)
		copy(dAtA[i:], m.Street)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Street)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Login) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Login) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha256) > 0 {
		i -= len(m.Sha256)
		copy(dAtA[i:], m.Sha256)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Sha256)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sha1) > 0 {
		i -= len(m.Sha1)
		copy(dAtA[i:], m.Sha1)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Sha1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Name) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Last) > 0 {
		i -= len(m.Last)
		copy(dAtA[i:], m.Last)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Last)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.First) > 0 {
		i -= len(m.First)
		copy(dAtA[i:], m.First)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.First)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Picture) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Picture) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Picture) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Thumbnail) > 0 {
		i -= len(m.Thumbnail)
		copy(dAtA[i:], m.Thumbnail)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Thumbnail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Medium) > 0 {
		i -= len(m.Medium)
		copy(dAtA[i:], m.Medium)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Medium)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Large) > 0 {
		i -= len(m.Large)
		copy(dAtA[i:], m.Large)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Large)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Profile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nat) > 0 {
		i -= len(m.Nat)
		copy(dAtA[i:], m.Nat)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Nat)))
		i--
		dAtA[i] = 0x62
	}
	if m.Picture != nil {
		{
			size, err := m.Picture.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRandomprofile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRandomprofile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Cell) > 0 {
		i -= len(m.Cell)
		copy(dAtA[i:], m.Cell)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Cell)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Registered) > 0 {
		i -= len(m.Registered)
		copy(dAtA[i:], m.Registered)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Registered)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Dob) > 0 {
		i -= len(m.Dob)
		copy(dAtA[i:], m.Dob)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Dob)))
		i--
		dAtA[i] = 0x32
	}
	if m.Login != nil {
		{
			size, err := m.Login.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRandomprofile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x22
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRandomprofile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Name != nil {
		{
			size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRandomprofile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProfileId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfileId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProfileLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfileLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Postcode != 0 {
		i = encodeVarintRandomprofile(dAtA, i, uint64(m.Postcode))
		i--
		dAtA[i] = 0x20
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Street) > 0 {
		i -= len(m.Street)
		copy(dAtA[i:], m.Street)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Street)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProfileLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfileLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha256) > 0 {
		i -= len(m.Sha256)
		copy(dAtA[i:], m.Sha256)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Sha256)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sha1) > 0 {
		i -= len(m.Sha1)
		copy(dAtA[i:], m.Sha1)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Sha1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProfileName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfileName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Last) > 0 {
		i -= len(m.Last)
		copy(dAtA[i:], m.Last)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Last)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.First) > 0 {
		i -= len(m.First)
		copy(dAtA[i:], m.First)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.First)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProfilePicture) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfilePicture) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfilePicture) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Thumbnail) > 0 {
		i -= len(m.Thumbnail)
		copy(dAtA[i:], m.Thumbnail)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Thumbnail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Medium) > 0 {
		i -= len(m.Medium)
		copy(dAtA[i:], m.Medium)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Medium)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Large) > 0 {
		i -= len(m.Large)
		copy(dAtA[i:], m.Large)
		i = encodeVarintRandomprofile(dAtA, i, uint64(len(m.Large)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRandomprofile(dAtA []byte, offset int, v uint64) int {
	offset -= sovRandomprofile(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	return n
}

func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	if m.Postcode != 0 {
		n += 1 + sovRandomprofile(uint64(m.Postcode))
	}
	return n
}

func (m *Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Sha1)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Sha256)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	return n
}

func (m *Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.First)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Last)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	return n
}

func (m *Picture) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Large)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Medium)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	return n
}

func (m *Profile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	if m.Login != nil {
		l = m.Login.Size()
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Dob)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Registered)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Cell)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	if m.Picture != nil {
		l = m.Picture.Size()
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Nat)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	return n
}

func (m *ProfileId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	return n
}

func (m *ProfileLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	if m.Postcode != 0 {
		n += 1 + sovRandomprofile(uint64(m.Postcode))
	}
	return n
}

func (m *ProfileLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Sha1)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Sha256)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	return n
}

func (m *ProfileName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.First)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Last)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	return n
}

func (m *ProfilePicture) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Large)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Medium)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovRandomprofile(uint64(l))
	}
	return n
}

func sovRandomprofile(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRandomprofile(x uint64) (n int) {
	return sovRandomprofile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ID{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Location) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Location{`,
		`Street:` + fmt.Sprintf("%v", this.Street) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Postcode:` + fmt.Sprintf("%v", this.Postcode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Login) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Login{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Salt:` + fmt.Sprintf("%v", this.Salt) + `,`,
		`Md5:` + fmt.Sprintf("%v", this.Md5) + `,`,
		`Sha1:` + fmt.Sprintf("%v", this.Sha1) + `,`,
		`Sha256:` + fmt.Sprintf("%v", this.Sha256) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Name) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Name{`,
		`First:` + fmt.Sprintf("%v", this.First) + `,`,
		`Last:` + fmt.Sprintf("%v", this.Last) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Picture) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Picture{`,
		`Large:` + fmt.Sprintf("%v", this.Large) + `,`,
		`Medium:` + fmt.Sprintf("%v", this.Medium) + `,`,
		`Thumbnail:` + fmt.Sprintf("%v", this.Thumbnail) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Profile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Profile{`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`Name:` + strings.Replace(this.Name.String(), "ProfileName", "ProfileName", 1) + `,`,
		`Location:` + strings.Replace(this.Location.String(), "ProfileLocation", "ProfileLocation", 1) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Login:` + strings.Replace(this.Login.String(), "ProfileLogin", "ProfileLogin", 1) + `,`,
		`Dob:` + fmt.Sprintf("%v", this.Dob) + `,`,
		`Registered:` + fmt.Sprintf("%v", this.Registered) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Cell:` + fmt.Sprintf("%v", this.Cell) + `,`,
		`Id:` + strings.Replace(this.Id.String(), "ProfileId", "ProfileId", 1) + `,`,
		`Picture:` + strings.Replace(this.Picture.String(), "ProfilePicture", "ProfilePicture", 1) + `,`,
		`Nat:` + fmt.Sprintf("%v", this.Nat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileId{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileLocation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileLocation{`,
		`Street:` + fmt.Sprintf("%v", this.Street) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Postcode:` + fmt.Sprintf("%v", this.Postcode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileLogin{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Salt:` + fmt.Sprintf("%v", this.Salt) + `,`,
		`Md5:` + fmt.Sprintf("%v", this.Md5) + `,`,
		`Sha1:` + fmt.Sprintf("%v", this.Sha1) + `,`,
		`Sha256:` + fmt.Sprintf("%v", this.Sha256) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileName{`,
		`First:` + fmt.Sprintf("%v", this.First) + `,`,
		`Last:` + fmt.Sprintf("%v", this.Last) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfilePicture) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfilePicture{`,
		`Large:` + fmt.Sprintf("%v", this.Large) + `,`,
		`Medium:` + fmt.Sprintf("%v", this.Medium) + `,`,
		`Thumbnail:` + fmt.Sprintf("%v", this.Thumbnail) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRandomprofile(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandomprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postcode", wireType)
			}
			m.Postcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Postcode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRandomprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandomprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Name) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Name: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Name: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.First = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Last = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandomprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Picture) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Picture: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Picture: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Large", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Large = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medium", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medium = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandomprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &ProfileName{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &ProfileLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Login == nil {
				m.Login = &ProfileLogin{}
			}
			if err := m.Login.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dob", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dob = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registered", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registered = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cell = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ProfileId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Picture", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Picture == nil {
				m.Picture = &ProfilePicture{}
			}
			if err := m.Picture.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandomprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandomprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postcode", wireType)
			}
			m.Postcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Postcode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRandomprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandomprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.First = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Last = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandomprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfilePicture) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfilePicture: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfilePicture: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Large", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Large = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medium", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medium = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandomprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRandomprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRandomprofile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRandomprofile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandomprofile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRandomprofile
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRandomprofile
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRandomprofile
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRandomprofile        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRandomprofile          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRandomprofile = fmt.Errorf("proto: unexpected end of group")
)
